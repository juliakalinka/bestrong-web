trigger:
  branches:
    include:
      - main
  paths:
    include:
      - 'ASPNETCore-WebAPI-Sample/**'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'azure-pipelines.yml'

pr:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  imageRepository: 'bestrong1acr1.azurecr.io/bestrong-web-api'
  tag: '$(Build.BuildId)'
  appServiceName: 'bestrong-app-service-bs2'
  resourceGroupName: 'bestrong-rg'

stages:
  - stage: Build
    displayName: 'Build and Push to ACR'
    jobs:
      - job: DockerBuildPush
        displayName: 'Build Docker Image and Push to ACR'
        steps:
          - checkout: self

          - task: Docker@2
            displayName: 'Login to ACR'
            inputs:
              command: login
              containerRegistry: 'bestrong-docker-acr'

          - task: Docker@2
            displayName: 'Build and Push Docker Image'
            inputs:
              command: buildAndPush
              repository: '$(imageRepository)'
              dockerfile: '$(System.DefaultWorkingDirectory)/Dockerfile'
              tags: |
                $(tag)

  - stage: Deploy
    displayName: 'Deploy to Azure App Service'
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - job: DeployImage
        displayName: 'Deploy Image to App Service'
        steps:
          - checkout: self

          - task: AzureCLI@2
            displayName: 'Deploy with Azure CLI'
            inputs:
              azureSubscription: 'bestrong-azure-connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Deploying to App Service..."
                az webapp config container set \
                  --name $(appServiceName) \
                  --resource-group $(resourceGroupName) \
                  --docker-custom-image-name $(imageRepository):$(tag) \
                  --docker-registry-server-url https://$(imageRepository | cut -d'/' -f1)

                az webapp restart \
                  --name $(appServiceName) \
                  --resource-group $(resourceGroupName)

                echo "Deployment successfully completed!"